import pandas as pd
from pulp import *
import pickle

r_s = 25
r_d = 25

# fetched_data = request.get_json()
# r_s_fetched = fetched_data['r_s']
# r_d_fetched = fetched_data['r_d']
TEFD_fetched = "Non_TEFD"

# if r_s_fetched != '':
#     r_s = int(r_s_fetched)
# if r_d_fetched != '':
#     r_d = int(r_d_fetched)

data = pd.ExcelFile("Input\\Monthly_Template_M1.xlsx")
surplus_wheat = pd.read_excel(data, sheet_name="Surplus_wheat", index_col=0)
deficit_wheat = pd.read_excel(data, sheet_name="Deficit_wheat", index_col=0)
surplus_rice = pd.read_excel(data, sheet_name="Surplus_rice", index_col=0)
deficit_rice = pd.read_excel(data, sheet_name="Deficit_rice", index_col=0)
states_alloc = pd.read_excel(data, sheet_name="States_allocation", index_col=0)
rail_cost = None

if TEFD_fetched == 'NON-TEFD':
    rail_cost = pd.read_excel("Input\\Non-TEFD.xlsx", sheet_name="Railhead_cost_matrix", index_col=0)
elif TEFD_fetched == 'TEFD':
    rail_cost = pd.read_excel("Input\\TEFD.xlsx", sheet_name="Railhead_cost_matrix", index_col=0)
elif TEFD_fetched == 'Non-TEFD+TC':
    rail_cost = pd.read_excel("Input\\Non_TEFD_TC.xlsx", sheet_name="Railhead_cost_matrix", index_col=0)
else:
    rail_cost = pd.read_excel("Input\\TEFD_TC.xlsx", sheet_name="Railhead_cost_matrix", index_col=0)

prob = LpProblem("Output\\FCI_monthly_model_allocation_rr", LpMinimize)
x_ij_wheat = LpVariable.dicts("x_wheat", [(i, j) for i in surplus_wheat.index for j in deficit_wheat.index], 0)
x_ij_rice = LpVariable.dicts("x_rice", [(i, j) for i in surplus_rice.index for j in deficit_rice.index], 0)

prob += lpSum(x_ij_wheat[(i, j)] * rail_cost.loc[i][j] for i in surplus_wheat.index for j in deficit_wheat.index) + \
        lpSum(x_ij_rice[(i, j)] * rail_cost.loc[i][j] for i in surplus_rice.index for j in deficit_rice.index)

for i in surplus_wheat.index:
    for j in deficit_wheat.index:
        if i == j:
            prob += x_ij_wheat[(i, j)] == 0

for i in surplus_rice.index:
    for j in deficit_rice.index:
        if i == j:
            prob += x_ij_rice[(i, j)] == 0

for i in surplus_wheat.index:
    prob += lpSum(x_ij_wheat[(i, j)] for j in deficit_wheat.index) <= surplus_wheat["Supply"][i]
for i in surplus_rice.index:
    prob += lpSum(x_ij_rice[(i, j)] for j in deficit_rice.index) <= surplus_rice["Supply"][i]

for i in surplus_wheat.index:
    prob += lpSum(x_ij_wheat[(i, j)] for j in deficit_wheat.index) + lpSum(x_ij_rice[(i, j)] for j in deficit_rice.index) <= r_s

for a in states_alloc.index:
    prob += lpSum(x_ij_wheat[(i, j)] for i in surplus_wheat.index for j in deficit_wheat.index if
                  deficit_wheat.loc[j]["State"] == a) >= states_alloc.loc[a]["Alloc_wheat"]
    prob += lpSum(x_ij_wheat[(i, j)] for i in surplus_wheat.index for j in deficit_wheat.index if
                  deficit_wheat.loc[j]["State"] == a) <= states_alloc.loc[a]["Alloc_wheat"]
    prob += lpSum(x_ij_rice[(i, j)] for i in surplus_rice.index for j in deficit_rice.index if
                  deficit_rice.loc[j]["State"] == a) >= states_alloc.loc[a]["Alloc_rice"]
    prob += lpSum(x_ij_rice[(i, j)] for i in surplus_rice.index for j in deficit_rice.index if
                  deficit_rice.loc[j]["State"] == a) <= states_alloc.loc[a]["Alloc_rice"]

for j in deficit_wheat.index:
    prob += lpSum(x_ij_wheat[(i, j)] for i in surplus_wheat.index) + \
            lpSum(x_ij_rice[(i, j)] for i in surplus_rice.index) <= deficit_wheat["Capacity"][j]
    prob += lpSum(x_ij_wheat[(i, j)] for i in surplus_wheat.index) + \
            lpSum(x_ij_rice[(i, j)] for i in surplus_rice.index) <= r_d

prob.writeLP("Output\\FCI_monthly_model_allocation_rr.lp")
prob.solve()

print("Status:", LpStatus[prob.status])
print("Minimum Cost of Transportation = Rs.", value(prob.objective), "Lakh")
print("Total Number of Variables:", len(prob.variables()))
print("Total Number of Constraints:", len(prob.constraints))

print(x_ij_rice)

result_data = {"Minimum Cost of Transportation": value(prob.objective),
               "Total Number of Variables": len(prob.variables()),
               "Total Number of Constraints": len(prob.constraints)}

with open('Output\\OutputPickle.pkl', 'wb') as f:
    pickle.dump(result_data, f)

r_wheat = {}
r_wheat = pd.DataFrame([], index=surplus_wheat.index, columns=deficit_wheat.index)

for r in surplus_wheat.index:
    for j in deficit_wheat.index:
        r_wheat.loc[r][j] = x_ij_wheat[(r, j)].value()

r_rice = {}
r_rice = pd.DataFrame([], index=surplus_rice.index, columns=deficit_rice.index)

for r in surplus_rice.index:
    for j in deficit_rice.index:
        r_rice.loc[r][j] = x_ij_rice[(r, j)].value()

with pd.ExcelWriter("Output//Total_Results.xlsx", mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
    r_wheat.to_excel(writer, sheet_name="r_wheat", float_format="%0.3f")
    r_rice.to_excel(writer, sheet_name="r_rice", float_format="%0.3f")

relevant_data = pd.ExcelFile("Output//Total_Results.xlsx")
relevant_r_wheat = pd.read_excel(relevant_data, sheet_name="r_wheat", index_col=0)
relevant_r_rice = pd.read_excel(relevant_data, sheet_name="r_rice", index_col=0)
relevant_Dict_wheat = {}
relevant_Dict_rice = {}

for i in range(len(relevant_r_wheat.index)):
    for j in range(len(relevant_r_wheat.columns)):
        if relevant_r_wheat.iat[i, j] > 0:
            relevant_Dict_wheat[relevant_r_wheat.index[i], relevant_r_wheat.columns[j]] = relevant_r_wheat.iloc[i][
                relevant_r_wheat.columns[j]]

for i in range(len(relevant_r_rice.index)):
    for j in range(len(relevant_r_rice.columns)):
        if relevant_r_rice.iat[i, j] > 0:
            relevant_Dict_rice[relevant_r_rice.index[i], relevant_r_rice.columns[j]] = relevant_r_rice.iloc[i][
                relevant_r_rice.columns[j]]

L1 = list(relevant_Dict_wheat.keys())
L2 = list(relevant_Dict_wheat.values())
A = []
B = []
C = []

df_wheat = pd.DataFrame()

for i in range(len(L1)):
    A.append(L1[i][0])
    B.append(L1[i][1])
    C.append(L2[i])

df_wheat["From"] = A
df_wheat["To"] = B
df_wheat["Values"] = C

# Continue from the previous code

From_state = []
To_state = []
Commodity = []

for i in range(len(L1)):
    for j in surplus_wheat.index:
        if L1[i][0] == j:
            From_state.append(surplus_wheat.loc[j]["State"])

for i in range(len(L1)):
    for j in surplus_wheat.index:
        if L1[i][1] == j:
            To_state.append(surplus_wheat.loc[j]["State"])

for i in range(len(L1)):
    Commodity.append("Wheat")

df_wheat.insert(1, "From_state", From_state)
df_wheat.insert(3, "To_state", To_state)
df_wheat.insert(4, "Commodity", Commodity)

L3 = list(relevant_Dict_rice.keys())
L4 = list(relevant_Dict_rice.values())

D = []
E = []
F = []

df_rice = pd.DataFrame()

for i in range(len(L3)):
    D.append(L3[i][0])
    E.append(L3[i][1])
    F.append(L4[i])

df_rice["From"] = D
df_rice["To"] = E
df_rice["Values"] = F

From_state_rice = []
To_state_rice = []
Commodity_rice = []

for i in range(len(L3)):
    for j in surplus_wheat.index:
        if L3[i][0] == j:
            From_state_rice.append(surplus_wheat.loc[j]["State"])

for i in range(len(L3)):
    for j in surplus_wheat.index:
        if L3[i][1] == j:
            To_state_rice.append(surplus_wheat.loc[j]["State"])

for i in range(len(L3)):
    Commodity_rice.append("Rice")

df_rice.insert(1, "From_state", From_state_rice)
df_rice.insert(3, "To_state", To_state_rice)
df_rice.insert(4, "Commodity", Commodity_rice)

with pd.ExcelWriter("Output//Relevent_Results.xlsx", mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
    df_wheat.to_excel(writer, sheet_name="wheat")
    df_rice.to_excel(writer, sheet_name="rice")

table = pd.ExcelFile("Output//Relevent_Results.xlsx")
table_data_w = pd.read_excel(table, sheet_name="wheat", index_col=0)
table_data_r = pd.read_excel(table, sheet_name="rice", index_col=0)
tab_A_w = list(table_data_w["From_state"])
tab_B_w = list(table_data_w["To_state"])
tab_A_r = list(table_data_r["From_state"])
tab_B_r = list(table_data_r["To_state"])
A_main_w = []
B_main_w = []
C_main_w = []
table_set_w = set()

A_main_r = []
B_main_r = []
C_main_r = []
table_set_r = set()

for i in range(len(tab_A_w)):
    table_set_w.add((tab_A_w[i], tab_B_w[i]))
for i in range(len(tab_A_r)):
    table_set_r.add((tab_A_r[i], tab_B_r[i]))

for i in table_set_w:
    source = i[0]
    dest = i[1]
    val = 0
    for _, row in table_data_w.iterrows():
        if (row["From_state"] == source) and (row["To_state"] == dest):
            val += int(row["Values"])
    A_main_w.append(source)
    B_main_w.append(dest)
    C_main_w.append(val)

for i in table_set_r:
    source = i[0]
    dest = i[1]
    val = 0
    for _, row in table_data_r.iterrows():
        if (row["From_state"] == source) and (row["To_state"] == dest):
            val += int(row["Values"])
    A_main_r.append(source)
    B_main_r.append(dest)
    C_main_r.append(val)

df_table_w = pd.DataFrame()
df_table_w["From_State"] = A_main_w
df_table_w["To_State"] = B_main_w
df_table_w["Values"] = C_main_w

df_table_r = pd.DataFrame()
df_table_r["From_State"] = A_main_r
df_table_r["To_State"] = B_main_r
df_table_r["Values"] = C_main_r

pivot_table_w = df_table_w.pivot_table(index="From_State", columns="To_State", values="Values", fill_value=0)
pivot_table_r = df_table_r.pivot_table(index="From_State", columns="To_State", values="Values", fill_value=0)

with pd.ExcelWriter("Output//Monthly_State_To_State_Table.xlsx", mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
    pivot_table_w.to_excel(writer, sheet_name="Wheat")
    pivot_table_r.to_excel(writer, sheet_name="Rice")

